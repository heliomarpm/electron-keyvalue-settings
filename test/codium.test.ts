// Generated by CodiumAI

import { KeyValues } from '../src/keyvalues'
import { Functions } from '../src/internal/functions'

describe('KeyValues', () => {

    // Tests that the set method sets the value of a key
    it('should set the value of a key', async () => {
        const mockSaveKeyValues = jest.spyOn(Functions.prototype, 'saveKeyValues').mockResolvedValue();
        const keyValues = new KeyValues();
        await keyValues.set('key', 'value');
        expect(mockSaveKeyValues).toHaveBeenCalledWith({ key: 'value' });
        mockSaveKeyValues.mockRestore();
    });

    // Tests that the set method sets the value of a nested key
    it('should set the value of a nested key', async () => {
        const mockLoadKeyValues = jest.spyOn(Functions.prototype, 'loadKeyValues');
        const mockSaveKeyValues = jest.spyOn(Functions.prototype, 'saveKeyValues');
        mockLoadKeyValues.mockResolvedValue({ parent: {} });
        const keyValues = new KeyValues();
        await keyValues.set('parent.child', 'value');
        expect(mockLoadKeyValues).toHaveBeenCalled();
        expect(mockSaveKeyValues).toHaveBeenCalledWith({ parent: { child: 'value' } });
        mockLoadKeyValues.mockRestore();
        mockSaveKeyValues.mockRestore();
    });

    // Tests that the unset method removes a key and its value
    it('should remove a key and its value', async () => {
        const mockLoadKeyValues = jest.spyOn(Functions.prototype, 'loadKeyValues');
        const mockSaveKeyValues = jest.spyOn(Functions.prototype, 'saveKeyValues');
        mockLoadKeyValues.mockResolvedValue({ key: 'value' });
        const keyValues = new KeyValues();
        await keyValues.unset('key');
        expect(mockLoadKeyValues).toHaveBeenCalled();
        expect(mockSaveKeyValues).toHaveBeenCalledWith({});
        mockLoadKeyValues.mockRestore();
        mockSaveKeyValues.mockRestore();
    });
});
